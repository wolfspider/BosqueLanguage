namespace NSMain;

struct entity Vector3 {
   field x: Float64;
   field y: Float64;
   field z: Float64;

   const zero: Vector3 = Vector3@{0.0f, 0.0f, 0.0f};

   method add(v: Vector3): Vector3 {
      return Vector3@{this.x + v.x, this.y + v.y, this.z + v.z};
   }

   method sub(v: Vector3): Vector3 {
      return Vector3@{this.x - v.x, this.y - v.y, this.z - v.z};
   } 

   static sum(l: List<Vector3>): Vector3 {
      return NSIterate::reduce<Vector3>(Vector3::zero, l, fn(a, b) => a.add(b), true);
   }

   method scale(s: Float64): Vector3 {
      return Vector3@{this.x * s, this.y * s, this.z * s};
   }

   method magnitude(): Float64 {
      return (this.x.square() + this.y.square() + this.z.square()).sqrt();
   }

   static distance(v1: Vector3, v2: Vector3): Float64 {
      return ((v1.x - v2.x).square() + (v1.y - v2.y).square() + (v1.z - v2.z).square()).sqrt();
   }
}

entity Body {

    field name: String;
    field x: Float64;
    field y: Float64;
    field z: Float64;
    field vx: Float64;
    field vy: Float64;
    field vz: Float64;
    field mass: Float64;
    field pos: Vector3;
    field vel: Vector3;

    const pi: Float64 = 3.141592653589793f;
    const solar_mass: Float64 = 4.0f * Body::pi * Body::pi;
    const days_per_year: Float64 = 365.24f;

    
    method offsetMomentum(px: Float64, py: Float64, pz: Float64): Body {
        
        return this.update(
            vx = -px / Body::solar_mass,
            vy = -py / Body::solar_mass,
            vz = -pz / Body::solar_mass );
    }

    const sun: Body = Body@{
        name = "sun",
        x = 0.0f,
        y = 0.0f,
        z = 0.0f,
        vx = 0.0f,
        vy = 0.0f,
        vz = 0.0f,
        mass = Body::solar_mass,
        pos=Vector3::zero,
        vel=Vector3::zero
    };

    const jupiter: Body = Body@{
        name = "jupiter",
        x = 4.84143144246472090e+00f,
        y = -1.16032004402742839e+00f,
        z = -1.03622044471123109e-01f,
        vx = 1.66007664274403694e-03f * Body::days_per_year,
        vy = 7.69901118419740425e-03f * Body::days_per_year,
        vz = -6.90460016972063023e-05f * Body::days_per_year,
        mass = 9.54791938424326609e-04f * Body::solar_mass,
        pos=Vector3@{4.84143144246472090e+00f, -1.16032004402742839e+00f, -1.03622044471123109e-01f},
        vel=Vector3@{1.66007664274403694e-03f * Body::days_per_year, 7.69901118419740425e-03f * Body::days_per_year, 6.90460016972063023e-05f * Body::days_per_year}
    };

    const saturn: Body = Body@{
        name = "saturn",
        x = 8.34336671824457987e+00f,
        y = 4.12479856412430479e+00f,
        z = -4.03523417114321381e-01f,
        vx = -2.76742510726862411e-03f * Body::days_per_year,
        vy = 4.99852801234917238e-03f * Body::days_per_year,
        vz = 2.30417297573763929e-05f * Body::days_per_year,
        mass = 2.85885980666130812e-04f * Body::solar_mass,
        pos=Vector3@{8.34336671824457987e+00f, 4.12479856412430479e+00f, 4.03523417114321381e-01f},
        vel=Vector3@{-2.76742510726862411e-03f * Body::days_per_year, 4.99852801234917238e-03f * Body::days_per_year, 2.30417297573763929e-05f * Body::days_per_year}
    };

    const uranus: Body = Body@{
        name = "uranus",
        x = 1.28943695621391310e+01f,
        y = -1.51111514016986312e+01f,
        z = -2.23307578892655734e-01f,
        vx = 2.96460137564761618e-03f * Body::days_per_year,
        vy = 2.37847173959480950e-03f * Body::days_per_year,
        vz = -2.96589568540237556e-05f * Body::days_per_year,
        mass = 4.36624404335156298e-05f * Body::solar_mass,
        pos=Vector3@{1.28943695621391310e+01f, -1.51111514016986312e+01f, -2.23307578892655734e-01f},
        vel=Vector3@{2.96460137564761618e-03f * Body::days_per_year, 2.37847173959480950e-03f * Body::days_per_year, -2.96589568540237556e-05f * Body::days_per_year}
    };

    const neptune: Body = Body@{
        name = "neptune",
        x = 1.53796971148509165e+01f,
        y = -2.59193146099879641e+01f,
        z = 1.79258772950371181e-01f,
        vx = 2.68067772490389322e-03f * Body::days_per_year,
        vy = 1.62824170038242295e-03f * Body::days_per_year,
        vz = -9.51592254519715870e-05f * Body::days_per_year,
        mass = 5.15138902046611451e-05f * Body::solar_mass,
        pos=Vector3@{1.53796971148509165e+01f, -2.59193146099879641e+01f, 1.79258772950371181e-01f},
        vel=Vector3@{2.68067772490389322e-03f * Body::days_per_year, 1.62824170038242295e-03f * Body::days_per_year, -9.51592254519715870e-05f * Body::days_per_year} 
    };
    
}

entity NBodySystem {
    
    field bodies: List<Body>;
    
    factory static create(): { bodies: List<Body> } {
        let planets = List<Body>@{
            Body::sun,
            Body::jupiter,
            Body::saturn,
            Body::uranus,
            Body::neptune
        };

        let px = Float64::sum(planets.map<Float64>(fn(p) => p.vx * p.mass));
        let py = Float64::sum(planets.map<Float64>(fn(p) => p.vy * p.mass));
        let pz = Float64::sum(planets.map<Float64>(fn(p) => p.vz * p.mass));

        return { bodies=List<Body>@{
            Body::sun.offsetMomentum(px, py, pz),
            Body::jupiter,
            Body::saturn,
            Body::uranus,
            Body::neptune
        }
      };
    }

    method advance(dt: Float64): NBodySystem {
      
      
      let nbodies = this.bodies.map<Body>(fn(b) => {
         let deltas = this.bodies
            .filter(fn(bb) => bb.name != b.name)
            .map<Vector3>(fn(bb) => {
               let dist = Vector3::distance(b.pos, bb.pos);
               let mag = dt / Float64::pow(dist, 3f);

               return (bb.pos.sub(b.pos)).scale(bb.mass * mag);
            });

         let nvel = b.vel.add(Vector3::sum(deltas));
         let npos = b.pos.add(nvel.scale(dt));

         return b.update(vel=nvel, pos=npos);
      });

      return NBodySystem@{ bodies=nbodies };
   }
  
    method energy(): Float64 {
    
        let kineticEnergies = this.bodies.map<Float64>(fn(b) => {     
         let vs = (b.vx.square() + b.vy.square() + b.vz.square());
         return 0.5f * b.mass * vs;
        });
        
        let ppairs = this.bodies.join<Body>(this.bodies, fn(b1, b2) => b1.name != b2.name);
        let potentialEnergies = ppairs.map<Float64>(fn(bp) => {
            return (bp.0.mass * bp.1.mass) / ((bp.0.x - bp.1.x).square() + (bp.0.y - bp.1.y).square() + (bp.0.z - bp.1.z).square()).sqrt();
        });

        return Float64::sum(kineticEnergies) - Float64::sum(potentialEnergies);
    }

}

entrypoint function main(): Float64 {
    
    var rsystem = NBodySystem@create();

    let steps2 = NSIterate::steps<NBodySystem>(rsystem,50000000,fn(z) =>
    {

        return rsystem.advance(0.01f);
        
        
    });
    //let rsystem = NSIterate::steps<NBodySystem>(NBodySystem@create(), 5000000, fn(state) => state.advance(0.01f));
    
    return rsystem.energy();
}




