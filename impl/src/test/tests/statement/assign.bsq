//-------------------------------------------------------------------------------------------------------
// Copyright (C) Microsoft. All rights reserved.
// Licensed under the MIT license. See LICENSE.txt file in the project root for full license information.
//-------------------------------------------------------------------------------------------------------

namespace NSTest;

entrypoint function constDeclNoType(): Int {
    let x = 3;
    return x;
}

entrypoint function constDeclWithType(): Int {
    let x: Int = 3;
    return x;
}

entrypoint function constDeclWithUnionType(): Int | String {
    let x: Int | String = 3;
    return x;
}

entrypoint function varDeclWithType(): Int {
    var x: Int = 3;
    return x;
}

entrypoint function varDeclWithNoValue(): Int {
    var x: Int?;
    return 1;
}

entrypoint function varDeclAndAssignWithType(): Int {
    var x: Int = 3;
    x = 4;
    return x;
}

entrypoint function varDeclAndAssignNoType(): Int {
    var x = 3;
    x = 4;
    return x;
}

entrypoint function varDeclAndAssignWithNoValue(): Int? {
    var x: Int?;
    x = 5;
    return x;
}

entrypoint function structuredDeclTuple(): Int {
    [let x: Int, let y] = [1, 2];
    return x + y;
}

entrypoint function structuredDeclMutableTuple(): Int {
    [var x: Int, var y] = [1, 2];
    x = x + 1;
    y = y + 1;
    return x + y;
}

entrypoint function structuredAssignTuple(): Int {
    var x: Int = 4;
    var y: Int;
    [x, y] = [1, 2];
    return x + y;
}

entrypoint function structuredDeclRecord(): Int {
    {f=let x: Int, g=let y} = {f=1, g=2};
    return x + y;
}

entrypoint function structuredDeclMutableRecord(): Int {
    {f=var x: Int, g=var y} = {f=1, g=2};
    return x + y;
}

entrypoint function structuredAssignRecord(): Int {
    var x: Int = 4;
    var y: Int;
    {f=x, g=y} = {f=1, g=2};
    return x + y;
}

entrypoint function structuredDeclAndAssign(): Int {
    var y: Int;
    [let x: Int, y] = [1, 2];
    return x + y;
}

entrypoint function structuredDeclGlobal(): Int {
    let {f=x, g=y} = {f=1, g=2};
    return x + y;
}

entrypoint function structuredDeclGlobalMutable(): Int {
    var {f=x: Int, g=y} = {f=1, g=2};
    x = x + 1;
    y = y + 1;
    return x + y;
}

entrypoint function structuredRecordWithTuple(): Int {
    let {f=x, g=[y, z]} = {f=1, g=[2, 3]};
    return x + y + z;
}

entrypoint function structuredTupleWithRecord(): Int {
    let [x, {f=y, g=z}] = [1, {f=2, g=3}];
    return x + y + z;
}

entrypoint function structuredDeclAndAssignOptionalsMatch(): Int {
    let {f=x?: Int, g=y?} = {f=1, g=2};
    return x + y;
}

entrypoint function structuredDeclAndAssignOptionalsDefault(): Int {
    let {f=x?: Int, g=y?} = (0 < 1) ? {} : {f=1, g=2};
    return (x ?| 1) + (y ?| 2);
}

entrypoint function structuredDeclAndAssignIgnores(): Int {
    let {f=_, g=[y, _:Int]} = {f=1, g=[2, 3]};
    return y;
}

entrypoint function puzzle(a: Int, b: Bool): Int {
    [let x: Int, let y] = [a, b ? 1 : -1];
    assert x + y == 3;
    return 1;
}
