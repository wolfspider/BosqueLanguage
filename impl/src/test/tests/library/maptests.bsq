//-------------------------------------------------------------------------------------------------------
// Copyright (C) Microsoft. All rights reserved.
// Licensed under the MIT license. See LICENSE.txt file in the project root for full license information.
//-------------------------------------------------------------------------------------------------------

namespace NSTest;

entrypoint function sizeAndEmpty(): Int {
    check Map<Int, Int>@{}.size() == 0;
    check Map<Int, Int>@{1 => 1, 2 => 2}.size() == 2;

    check Map<Int, Int>@{}.empty();

    return 0;
}

entrypoint function hasop(): Int {
    let m = Map<Int, Int>@{1 => 1, 2 => 2};
    let me = Map<Int, Int>@{};

    check m.has(1);
    check !me.has(1);

    check !m.has(11);

    return 0;
}

entrypoint function keylistop(): Int {
    let m = Map<Int, Bool>@{1 => false, 2 => true};

    let kl = m.keys();
    check kl.size() == 2;
    check kl.front() == 1;
    check kl.back() == 2;

    return 0;
}

entrypoint function keysetop(): Int {
    let m = Map<Int, Bool>@{1 => false, 2 => true};

    let ks = m.keySet();
    check ks.size() == 2;
    check ks.has(1);
    check ks.has(2);

    return 0;
}

entrypoint function valuesop(): Int {
    let m = Map<Int, Bool>@{1 => false, 2 => true};

    let vl = m.values();
    check vl.size() == 2;
    check !vl.front();
    check vl.back();

    return 0;
}

entrypoint function entriesop(): Int {
    let m = Map<Int, Bool>@{1 => false, 2 => true};

    let ke = m.entries();
    check ke.size() == 2;
    check ke.front().key == 1;
    check !ke.front().value;
    check ke.back().key == 2;
    check ke.back().value;

    return 0;
}

entrypoint function hasallop(): Int {
    let m = Map<Int, Int>@{1 => 1, 2 => 2};
    let me = Map<Int, Int>@{};

    check m.hasAll(1);
    check m.hasAll(1, 2);
    check me.hasAll();

    check !me.hasAll(1);
    check !m.hasAll(1, 2, 3);
    check !m.hasAll(1, 3);

    return 0;
}

entrypoint function domainsubsetofop(): Int {
    let m = Map<Int, Int>@{1 => 1, 2 => 2};
    let me = Map<Int, Int>@{};

    check m.domainSubsetOf(Set<Int>@{1});
    check m.domainSubsetOf(Set<Int>@{1, 2});
    check me.domainSubsetOf(Set<Int>@{});

    check !me.domainSubsetOf(Set<Int>@{1});
    check !m.domainSubsetOf(Set<Int>@{1, 2, 3});
    check !m.domainSubsetOf(Set<Int>@{1, 3});

    return 0;
}

entrypoint function gettests(): Int {
    let m = Map<Int, Int>@{1 => 1, 2 => 2};
    let me = Map<Int, Int>@{};

    check m.get(1) == 1;
    check m.tryGet(2) == 2;
    check m.defaultGet(2, 0) == 2;

    check me.tryGet(2) == none;
    check me.defaultGet(2, 0) == 0; 

    check m.tryGet(5) == none;
    check m.defaultGet(5, 0) == 0; 

    return 0;
}

entrypoint function geterr1(): Int {
    let me = Map<Int, Int>@{};

    return me.get(1);
}

entrypoint function geterr2(): Int {
    let m = Map<Int, Int>@{1 => 1, 2 => 2};

    return m.get(5);
}

entrypoint function submapop(): Int {
    let m = Map<Int, Int>@{1 => 1, 2 => 2, 3 => 3};

    let ms = m.submap(fn(k, v) => k > 1);
    check ms.size() == 2;
    check ms.get(2) == 2;
    check ms.get(3) == 3;

    return 0;
}

entrypoint function oftypeop(): Int {
    let m = Map<Int, Int?>@{1 => 1 typeas Int?, 2 => 2 typeas Int?, 3 => none typeas Int?};

    let mc = m.ofType<Int, Int>();
    check mc.size() == 2;
    check mc.get(2) == 2;

    return 0;
}

entrypoint function castop(): Int {
    let m = Map<Int, Int?>@{1 => 1 typeas Int?, 2 => 2 typeas Int?};

    let mc = m.cast<Int, Int>();
    check mc.size() == 2;
    check mc.get(2) == 2;

    return 0;
}

entrypoint function casterr(): Int {
    let m = Map<Int, Int?>@{1 => 1 typeas Int?, 2 => 2 typeas Int?, 3 => none typeas Int?};

    return m.cast<Int, Int>().size();
}

entrypoint function projectops(): Int {
    let m = Map<Int, Int>@{1 => 1, 2 => 2, 3 => 3};

    let pls = m.projectAll(1, 2);
    check pls.size() == 2;
    check pls.get(2) == 2;

    let plo = m.projectAll(2, 3, 4);
    check plo.size() == 2;
    check plo.get(2) == 2;

    let pss = m.projectSet(Set<Int>@{1, 2});
    check pss.size() == 2;
    check pss.get(2) == 2;

    let pso = m.projectSet(Set<Int>@{2, 3, 4});
    check pso.size() == 2;
    check pso.get(2) == 2;

    return 0;
}

entrypoint function excludeops(): Int {
    let m = Map<Int, Int>@{1 => 1, 2 => 2, 3 => 3};

    let els = m.excludeAll(1, 2);
    check els.size() == 1;
    check els.get(3) == 3;

    let elo = m.excludeAll(2, 3, 4);
    check elo.size() == 1;
    check elo.get(1) == 1;

    let ess = m.excludeSet(Set<Int>@{1, 2});
    check ess.size() == 1;
    check ess.get(3) == 3;

    let eso = m.excludeSet(Set<Int>@{2, 3, 4});
    check eso.size() == 1;
    check eso.get(1) == 1;

    return 0;
}

entrypoint function remapop(): Int {
    let m = Map<Int, Int>@{1 => 1, 2 => 2, 3 => 3};

    let rm = m.remap<Bool>(fn(k, v) => v > 2);
    check rm.size() == 3;
    check !rm.get(1);
    check !rm.get(2);
    check rm.get(3);

    return 0;
}

entrypoint function composewithops(): Int {
    let m1 = Map<Int, Int>@{1 => 1, 2 => 2, 3 => 3};
    let m1t = Map<Int, Int>@{1 => 1, 2 => 4, 3 => 3};
    let m2 = Map<Int, Bool>@{1 => true, 2 => false, 3 => true};

    let cm = m1.composeWith<Bool>(m2);
    check cm.size() == 3;
    check cm.get(1);
    check !cm.get(2);
    check cm.get(3);

    let trycm = m1t.tryComposeWith<Bool>(m2);
    check trycm.size() == 3;
    check trycm.get(1) == true;
    check trycm.get(2) == none;
    check trycm.get(3) == true;

    let defaultcm = m1t.defaultComposeWith<Bool>(m2, true);
    check defaultcm.size() == 3;
    check defaultcm.get(1);
    check defaultcm.get(2);
    check defaultcm.get(3);

    return 0;
}

entrypoint function composewitherr(): Int {
    let m1 = Map<Int, Int>@{1 => 1, 2 => 4, 3 => 3};
    let m2 = Map<Int, Bool>@{1 => true, 2 => false, 3 => true};

    let cm = m1.composeWith<Bool>(m2);
    return cm.size();
}

entrypoint function invertops(): Int {
    let mi = Map<Int, Int>@{1 => 1, 2 => 4, 3 => 9};
    let ii = mi.invertInjective();
    check ii.size() == 3;
    check ii.get(1) == 1;
    check ii.get(4) == 2;
    check ii.get(9) == 3; 

    let mr = Map<Int, Bool>@{1 => true, 2 => true, 3 => false};
    let ir = mr.invertRelational();
    check ir.size() == 2;
    check ir.get(true).size() == 2;
    check ir.get(true).front() == 1;
    check ir.get(true).back() == 2;
    check ir.get(false).size() == 1;
    check ir.get(false).front() == 3;

    return 0;
}

entrypoint function inverterr(): Int {
    let mr = Map<Int, Bool>@{1 => true, 2 => true, 3 => false};

    return mr.invertInjective().size();
}

entrypoint function unionop(): Int {
    let m1 = Map<Int, Int>@{1 => 1, 2 => 2};
    let m2 = Map<Int, Int>@{0 => 1, 4 => 4};

    let mm = m1.unionWith(m2);
    check mm.size() == 4;
    check mm.get(0) == 1;
    check mm.get(1) == 1;
    check mm.get(2) == 2;
    check mm.get(4) == 4;

    let ma = Map<Int, Int>::unionOf(m2, m1);
    check ma.size() == 4;
    check ma.get(0) == 1;
    check ma.get(1) == 1;
    check ma.get(2) == 2;
    check ma.get(4) == 4;

    return 0;
}

entrypoint function unionerr(): Int {
    let m1 = Map<Int, Int>@{1 => 1, 2 => 2};
    let m2 = Map<Int, Int>@{1 => 1, 4 => 4};

    return m1.unionWith(m2).size();
}

entrypoint function mergeop(): Int {
    let m1 = Map<Int, Int>@{1 => 1, 2 => 2};
    let m2 = Map<Int, Int>@{1 => 2, 4 => 4};

    let mm = m1.mergeWith(m2);
    check mm.size() == 3;
    check mm.get(1) == 2;
    check mm.get(2) == 2;
    check mm.get(4) == 4;

    let ma = Map<Int, Int>::mergeOf(m1, m2);
    check ma.size() == 3;
    check ma.get(1) == 2;
    check ma.get(2) == 2;
    check ma.get(4) == 4;

    return 0;
}