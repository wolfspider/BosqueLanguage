//-------------------------------------------------------------------------------------------------------
// Copyright (C) Microsoft. All rights reserved.
// Licensed under the MIT license. See LICENSE.txt file in the project root for full license information.
//-------------------------------------------------------------------------------------------------------

namespace NSTest;

entrypoint function concatop(): Int {
    let ll = List<Int>::concat(List<Int>@{1, 2}, List<Int>@{}, List<Int>@{3});

    check ll.size() == 3;
    check ll.front() == 1;
    check ll.get(1) == 2;
    check ll.back() == 3;

    return 0;
}

entrypoint function fillop(): Int {
    let ll = List<Int>::fill(2, 5);
    
    check ll.size() == 2;
    check ll.front() == 5;
    check ll.back() == 5;

    return 0;
}

entrypoint function sizeAndEmpty(): Int {
    check List<Int>@{}.size() == 0;
    check List<Int>@{1, 2}.size() == 2;

    check List<Int>@{}.empty();

    return 0;
}

entrypoint function frontBackGet(): Int {
    let e = List<Int>@{};
    let l = List<Int>@{1, 2, 3};

    check l.front() == 1;
    check l.back() == 3;
    check l.get(1) == 2;

    check l.tryFront() == 1;
    check l.tryBack() == 3;
    check l.tryGet(1) == 2;

    check l.defaultFront(-1) == 1;
    check l.defaultBack(-1) == 3;
    check l.defaultGet(1, -1) == 2;

    check e.tryFront() == none;
    check e.tryBack() == none;
    check e.tryGet(1) == none;

    check e.defaultFront(-1) == -1;
    check e.defaultBack(-1) == -1;
    check e.defaultGet(1, -1) == -1;

    return 0;
}

entrypoint function frontError(): Int {
    return List<Int>@{}.front();
}

entrypoint function backError(): Int {
    return List<Int>@{}.back();
}

entrypoint function getError(): Int {
    return List<Int>@{1, 2}.get(5);
}

entrypoint function toSet(): Int {
    check List<Int>@{1, 2}.toSet().size() == 2;
    check List<Int>@{2, 1, 2}.toSet().size() == 2;

    return 0;
}

entrypoint function single(): Int {
    let e = List<Int>@{};
    let l = List<Int>@{1, 2, 3};

    check l.single(fn(x) => x + 1 == 3) == 2;
    check l.trySingle(fn(x) => x + 1 == 3) == 2;
    check l.defaultSingle(0, fn(x) => x + 1 == 3) == 2;

    check e.trySingle(fn(x) => x + 1 == 3) == none;
    check e.defaultSingle(0, fn(x) => x + 1 == 3) == 0;

    check l.trySingle(fn(x) => x == 2 || x == 1) == none;
    check l.defaultSingle(0, fn(x) => x == 2 || x == 1) == 0;

    return 0;
}

entrypoint function singleError(): Int {
    let e = List<Int>@{};
    let l = List<Int>@{1, 2, 2};

    return l.single(fn(x) => x + 1 == 3);
}

entrypoint function xof(): Int {
    let e = List<Int>@{};
    let l = List<Int>@{1, 2, 3};

    check l.allOf(fn(x) => x > 0);
    check !l.allOf(fn(x) => x != 3);
    check e.allOf(fn(x) => false);

    check l.noneOf(fn(x) => x == 0);
    check !l.noneOf(fn(x) => x == 3);
    check e.noneOf(fn(x) => true);

    check !l.anyOf(fn(x) => x == 0);
    check l.anyOf(fn(x) => x == 3);
    check !e.anyOf(fn(x) => true);

    return 0;
}

entrypoint function countp(): Int {
    let l = List<Int>@{1, 2, 3};

    check l.countIf(fn(x) => x == 2) == 1;
    check l.countIf(fn(x) => x == 5) == 0;
    check l.countIf(fn(x) => x > 0) == 3;

    check l.countIfNot(fn(x) => x == 2) == 2;
    check l.countIfNot(fn(x) => x == 5) == 3;
    check l.countIfNot(fn(x) => x > 0) == 0;

    return 0;
}

entrypoint function contcount(): Int {
    let l = List<Int>@{1, 2, 2, 3};
    let ll = List<Int?>@{1, none, 3};

    check l.contains(1);
    check !l.contains(12);
    check ll.contains(1);
    check !ll.contains(2);
    check ll.contains(none);

    check l.count(1) == 1;
    check l.count(12) == 0;
    check l.count(2) == 2;
    check ll.count(1) == 1;
    check ll.count(2) == 0;
    check ll.count(none) == 1;

    return 0;
}

entrypoint function minmax(): Int {
    let l = List<Int>@{1, -2, 3};
    let e = List<Int>@{};
    let ll = List<Int?>@{1, 2, none};

    check l.min() == -2;
    check l.max() == 3;
    check ll.min() == 1;
    check ll.max() == none;

    check l.tryMin() == -2;
    check l.tryMax() == 3;
    check e.tryMin() == none;
    check e.tryMax() == none;

    check l.defaultMin(0) == -2;
    check l.defaultMax(0) == 3;
    check e.defaultMin(0) == 0;
    check e.defaultMax(0) == 0;

    return 0;
}

entrypoint function minerror(): Int {
    let e = List<Int>@{};

    return e.min();
}

entrypoint function maxerror(): Int {
    let e = List<Int>@{};

    return e.max();
}

entrypoint function sumop(): Int {
    let l = List<Int>@{1, 2, 3};
    let e = List<Int>@{};

    check l.sum() == 6;
    check e.sum() == 0;

    return 0;
}

entrypoint function findop(): Int {
    let e = List<Int>@{};
    let l = List<Int>@{1, 2, 3};

    check l.find(fn(x) => x + 1 == 3) == 2;
    check l.tryFind(fn(x) => x + 1 == 3) == 2;
    check l.defaultFind(0, fn(x) => x + 1 == 3) == 2;

    check e.tryFind(fn(x) => x + 1 == 3) == none;
    check e.defaultFind(0, fn(x) => x + 1 == 3) == 0;

    check l.tryFind(fn(x) => x == 5) == none;
    check l.defaultFind(0, fn(x) => x == 5) == 0;

    check l.findLast(fn(x) => x + 1 == 3) == 2;
    check l.tryFindLast(fn(x) => x + 1 == 3) == 2;
    check l.defaultFindLast(0, fn(x) => x + 1 == 3) == 2;

    check e.tryFindLast(fn(x) => x + 1 == 3) == none;
    check e.defaultFindLast(0, fn(x) => x + 1 == 3) == 0;

    check l.tryFindLast(fn(x) => x == 5) == none;
    check l.defaultFindLast(0, fn(x) => x == 5) == 0;

    return 0;
}

entrypoint function findnotop(): Int {
    let e = List<Int>@{};
    let l = List<Int>@{1, 2, 3};

    check l.findNot(fn(x) => x + 1 == 3) == 1;
    check l.tryFindNot(fn(x) => x + 1 == 3) == 1;
    check l.defaultFindNot(0, fn(x) => x + 1 == 3) == 1;

    check e.tryFindNot(fn(x) => x + 1 == 3) == none;
    check e.defaultFindNot(0, fn(x) => x + 1 == 3) == 0;

    check l.tryFindNot(fn(x) => x > 0) == none;
    check l.defaultFindNot(0, fn(x) => x > 0) == 0;

    check l.findLastNot(fn(x) => x + 1 == 3) == 3;
    check l.tryFindLastNot(fn(x) => x + 1 == 3) == 3;
    check l.defaultFindLastNot(0, fn(x) => x + 1 == 3) == 3;

    check e.tryFindLastNot(fn(x) => x + 1 == 3) == none;
    check e.defaultFindLastNot(0, fn(x) => x + 1 == 3) == 0;

    check l.tryFindLastNot(fn(x) => x > 0) == none;
    check l.defaultFindLastNot(0, fn(x) => x > 0) == 0;

    return 0;
}

entrypoint function findoperror(): Int {
    let e = List<Int>@{};

    return e.find(fn(x) => x == 2);
}

entrypoint function findlastoperror(): Int {
    let l = List<Int>@{1, 1};

    return l.findLast(fn(x) => x == 2);
}

entrypoint function findindexop(): Int {
    let l = List<Int>@{1, 2, 3, 2};

    check l.findIndexOf(fn(x) => x == 2) == 1;
    check l.findIndexOf(fn(x) => x == 2, 0, l.size()) == 1;
    check l.findIndexOf(fn(x) => x == 2, 1) == 1;
    check l.findIndexOf(fn(x) => x == 2, 2) == 3;

    check l.findIndexOf(fn(x) => x == 2, end=l.size(), start=0) == 1;

    check l.tryFindIndexOf(fn(x) => x == 3, 0, 1) == none;
    check l.tryFindIndexOf(fn(x) => x == 3, 2, 2) == none;

    check l.findLastIndexOf(fn(x) => x == 2) == 3;
    check l.findLastIndexOf(fn(x) => x == 2, 0, l.size()) == 3;
    check l.findLastIndexOf(fn(x) => x == 2, 1, 2) == 1;
    check l.findLastIndexOf(fn(x) => x == 2, 2, l.size()) == 3;

    check l.findLastIndexOf(fn(x) => x == 3, end=l.size(), start=0) == 2;

    check l.tryFindLastIndexOf(fn(x) => x == 3, 0, 1) == none;
    check l.tryFindLastIndexOf(fn(x) => x == 3, 2, 2) == none;

    return 0;
}

entrypoint function findindexopalts(): Int {
    let e = List<Int>@{};
    let l = List<Int>@{1, 2, 3};

    check e.tryFindIndexOf(fn(x) => x + 1 == 3) == none;
    check l.tryFindIndexOf(fn(x) => x == 5) == none;

    check e.tryFindLastIndexOf(fn(x) => x + 1 == 3) == none;
    check l.tryFindLastIndexOf(fn(x) => x == 5) == none;

    return 0;
}

entrypoint function findindexerr1(): Int {
    let e = List<Int>@{};
    return e.findIndexOf(fn(x) => x == 2);
}

entrypoint function findindexerr2(): Int {
    let l = List<Int>@{1, 2, 3, 2};
    return l.findIndexOf(fn(x) => x == 2, -1, 1);
}

entrypoint function findindexerr3(): Int {
    let l = List<Int>@{1, 2, 3, 2};
    return l.findIndexOf(fn(x) => x == 2, 0, 5);
}

entrypoint function findindexerr4(): Int {
    let l = List<Int>@{1, 2, 3, 2};
    return l.findIndexOf(fn(x) => x == 2, 2, 1);
}

entrypoint function findindexnotop(): Int {
    let l = List<Int>@{1, 2, 3, 2};

    check l.findIndexOfNot(fn(x) => x < 2) == 1;
    check l.findIndexOfNot(fn(x) => x < 2, 0, l.size()) == 1;
    check l.findIndexOfNot(fn(x) => x < 2, 1) == 1;
    check l.findIndexOfNot(fn(x) => x < 2 || x == 3, 2) == 3;

    check l.findIndexOfNot(fn(x) => x < 2, end=l.size(), start=0) == 1;

    check l.tryFindIndexOfNot(fn(x) => x < 3, 0, 1) == none;
    check l.tryFindIndexOfNot(fn(x) => x < 3, 2, 2) == none;

    check l.findLastIndexOfNot(fn(x) => x < 2) == 3;
    check l.findLastIndexOfNot(fn(x) => x < 2, 0, l.size()) == 3;
    check l.findLastIndexOfNot(fn(x) => x < 2, 1, 2) == 1;
    check l.findLastIndexOfNot(fn(x) => x < 2, 2, l.size()) == 3;

    check l.findLastIndexOfNot(fn(x) => x < 3, end=l.size(), start=0) == 2;

    check l.tryFindLastIndexOfNot(fn(x) => x < 3, 0, 1) == none;
    check l.tryFindLastIndexOfNot(fn(x) => x < 3, 2, 2) == none;

    return 0;
}

entrypoint function findindexnotopalts(): Int {
    let e = List<Int>@{};
    let l = List<Int>@{1, 2, 3};

    check e.tryFindIndexOfNot(fn(x) => x + 1 == 3) == none;
    check l.tryFindIndexOfNot(fn(x) => x < 5) == none;

    check e.tryFindLastIndexOfNot(fn(x) => x + 1 == 3) == none;
    check l.tryFindLastIndexOfNot(fn(x) => x < 5) == none;

    return 0;
}

entrypoint function findindexnoterr1(): Int {
    let e = List<Int>@{};
    return e.findIndexOfNot(fn(x) => x == 2);
}

entrypoint function findindexnoterr2(): Int {
    let l = List<Int>@{1, 2, 3, 2};
    return l.findIndexOfNot(fn(x) => x == 2, -1, 1);
}

entrypoint function findindexnoterr3(): Int {
    let l = List<Int>@{1, 2, 3, 2};
    return l.findIndexOfNot(fn(x) => x == 2, 0, 5);
}

entrypoint function findindexnoterr4(): Int {
    let l = List<Int>@{1, 2, 3, 2};
    return l.findIndexOfNot(fn(x) => x == 2, 2, 1);
}


entrypoint function indexop(): Int {
    let l = List<Int>@{1, 2, 3, 2};

    check l.indexOf(2) == 1;
    check l.indexOf(2, 0, l.size()) == 1;
    check l.indexOf(2, 1) == 1;
    check l.indexOf(2, 2) == 3;

    check l.indexOf(2, end=l.size(), start=0) == 1;

    check l.tryIndexOf(3, 0, 1) == none;
    check l.tryIndexOf(3, 2, 2) == none;

    check l.lastIndexOf(2) == 3;
    check l.lastIndexOf(2, 0, l.size()) == 3;
    check l.lastIndexOf(2, 1, 2) == 1;
    check l.lastIndexOf(2, 2, l.size()) == 3;

    check l.lastIndexOf(3, end=l.size(), start=0) == 2;

    check l.tryLastIndexOf(3, 0, 1) == none;
    check l.tryLastIndexOf(3, 2, 2) == none;

    return 0;
}

entrypoint function indexopalts(): Int {
    let e = List<Int>@{};
    let l = List<Int>@{1, 2, 3};

    check e.tryIndexOf(3) == none;
    check l.tryIndexOf(5) == none;

    check e.tryLastIndexOf(3) == none;
    check l.tryLastIndexOf(5) == none;

    return 0;
}

entrypoint function indexerr1(): Int {
    let e = List<Int>@{};
    return e.indexOf(2);
}

entrypoint function indexerr2(): Int {
    let l = List<Int>@{1, 2, 3, 2};
    return l.indexOf(2, -1, 1);
}

entrypoint function indexerr3(): Int {
    let l = List<Int>@{1, 2, 3, 2};
    return l.indexOf(2, 0, 5);
}

entrypoint function indexerr4(): Int {
    let l = List<Int>@{1, 2, 3, 2};
    return l.indexOf(2, 2, 1);
}

entrypoint function filterop(): Int {
    let l = List<Int>@{1, 2, 3, 2};

    let lp = l.filter(fn(x) => x == 2);
    check lp.size() == 2;
    check lp.front() == 2;
    check lp.back() == 2;

    let le = l.filter(fn(x) => false);
    check le.empty();

    return 0;
}

entrypoint function filternotop(): Int {
    let l = List<Int>@{1, 2, 3, 2};

    let lp = l.filterNot(fn(x) => x == 2);
    check lp.size() == 2;
    check lp.front() == 1;
    check lp.back() == 3;

    let le = l.filterNot(fn(x) => true);
    check le.empty();

    return 0;
}

entrypoint function oftypeop(): Int {
    let l = List<Int|Bool|String>@{1, false, true, 2};

    let lp = l.ofType<Int>();
    check lp.size() == 2;
    check lp.front() == 1;
    check lp.back() == 2;
    check lp.sum() == 3;

    let lb = l.ofType<Bool>();
    check lb.size() == 2;
    check lb.back();

    let le = l.ofType<String>();
    check le.empty();

    return 0;
}

entrypoint function castop(): Int {
    let l = List<Int|Bool|None>@{1, 2, 3, 2};
    let le = List<Int|Bool|None>@{};

    let lp = l.cast<Int>();
    check lp.size() == 4;
    check lp.front() == 1;
    check lp.back() == 2;
    check lp.sum() == 8;

    let lei = le.cast<Int>();
    check lei.empty();

    return 0; 
}

entrypoint function casterr(): Int {
    let l = List<Int|Bool|None>@{1, 2, true, 2};
    
    return l.cast<Int>().front();
}

entrypoint function sliceop(): Int {
    let l = List<Int>@{1, 2, 3, 4};

    let ls = l.slice();
    check ls.size() == 4;
    check ls.front() == 1;
    check ls.back() == 4;

    let lfe = l.slice(0, 2);
    check lfe.size() == 2;
    check lfe.front() == 1;
    check lfe.back() == 2;

    let lf = l.slice(end=2);
    check lf.size() == 2;
    check lf.front() == 1;
    check lf.back() == 2;

    let lre = l.slice(2);
    check lre.size() == 2;
    check lre.front() == 3;
    check lre.back() == 4;

    let lr = l.slice(start=2);
    check lr.size() == 2;
    check lr.front() == 3;
    check lr.back() == 4;

    let lm = l.slice(1, 3);
    check lm.size() == 2;
    check lm.front() == 2;
    check lm.back() == 3;

    return 0;
}

entrypoint function sliceerr1(): Int {
    let l = List<Int>@{1, 2, 3, 4};

    let ls = l.slice(-1, 2);
    return ls.size();
}

entrypoint function sliceerr2(): Int {
    let l = List<Int>@{1, 2, 3, 4};

    let ls = l.slice(0, 5);
    return ls.size();
}

entrypoint function sliceerr3(): Int {
    let l = List<Int>@{1, 2, 3, 4};

    let ls = l.slice(2, 1);
    return ls.size();
}

entrypoint function removefirstop(): Int {
    let l = List<Int>@{1, 2, 3, 4};

    let lm = l.removeFirst(2);
    check lm.size() == 2;
    check lm.front() == 3;

    let la = l.removeFirst(4);
    check la.empty();

    return 0;
}

entrypoint function removefirsterr(): Int {
    let l = List<Int>@{1, 2, 3, 4};

    let le = l.removeFirst(5);
    return le.size();
}

entrypoint function removelastop(): Int {
    let l = List<Int>@{1, 2, 3, 4};

    let lm = l.removeLast(2);
    check lm.size() == 2;
    check lm.back() == 2;

    let la = l.removeFirst(4);
    check la.empty();

    return 0;
}

entrypoint function removelasterr(): Int {
    let l = List<Int>@{1, 2, 3, 4};

    let le = l.removeLast(5);
    return le.size();
}

entrypoint function takewhileop(): Int {
    let l = List<Int>@{1, 2, 3, 4};

    let ll = l.takeWhile(fn(x) => x < 3);
    check ll.size() == 2;
    check ll.front() == 1;
    check ll.back() == 2;

    return 0;
}

entrypoint function discardwhileop(): Int {
    let l = List<Int>@{1, 2, 3, 4};

    let ll = l.discardWhile(fn(x) => x < 3);
    check ll.size() == 2;
    check ll.front() == 3;
    check ll.back() == 4;

    return 0;
}

entrypoint function takeuntilop(): Int {
    let l = List<Int>@{1, 2, 3, 4};

    let ll = l.takeUntil(fn(x) => x == 3);
    check ll.size() == 2;
    check ll.front() == 1;
    check ll.back() == 2;

    return 0;
}

entrypoint function discarduntilop(): Int {
    let l = List<Int>@{1, 2, 3, 4};

    let ll = l.discardUntil(fn(x) => x == 3);
    check ll.size() == 2;
    check ll.front() == 3;
    check ll.back() == 4;

    return 0;
}

entrypoint function uniqueop(): Int {
    let l = List<Int>@{1, 2, 1, 2};

    let ll = l.unique();
    check ll.size() == 2;
    check ll.front() == 1;
    check ll.back() == 2;

    return 0;
}

entrypoint function reverseop(): Int {
    let l = List<Int>@{1, 2, 3};

    let ll = l.reverse();
    check ll.size() == 3;
    check ll.front() == 3;
    check ll.back() == 1;

    return 0;
}

entrypoint function mapop(): Int {
    let l = List<Int>@{1, 2, 3};

    let ll = l.map<Int>(fn(x) => x + 1);
    check ll.size() == 3;
    check ll.front() == 2;
    check ll.back() == 4;

    return 0;
}

entrypoint function mapindexop(): Int {
     let l = List<Bool>@{true, true, false};

    let ll = l.mapIndex<Int>(fn(x, i) => x ? i : -i);
    check ll.size() == 3;
    check ll.front() == 0;
    check ll.back() == -2;

    return 0;
}

entrypoint function projectop(): Int {
    let l = List<Int>@{1, 2, 3};
    let m = Map<Int, Bool>@{1 => true, 2 => true, 3 => false};

    let ll = l.projectWithMap<Bool>(m);
    check ll.size() == 3;
    check ll.front() == true;
    check ll.back() == false;

    return 0;
}

entrypoint function projecterr(): Int {
    let l = List<Int>@{1, 0, 3};
    let m = Map<Int, Bool>@{1 => true, 2 => true, 3 => false};

    let ll = l.projectWithMap<Bool>(m);
    return ll.size();
}

entrypoint function tryprojectop(): Int {
    let l = List<Int>@{1, 0, 3};
    let m = Map<Int, Bool>@{1 => true, 2 => true, 3 => false};

    let ll = l.tryProjectWithMap<Bool>(m);
    check ll.size() == 3;
    check ll.front() == true;
    check ll.get(1) == none;
    check ll.back() == false;

    return 0;
}

entrypoint function defaultprojectop(): Int {
    let l = List<Int>@{1, 0, 3};
    let m = Map<Int, Bool>@{1 => true, 2 => true, 3 => false};

    let ll = l.defaultProjectWithMap<Bool>(false, m);
    check ll.size() == 3;
    check ll.front() == true;
    check ll.get(1) == false;
    check ll.back() == false;

    return 0;
}

entrypoint function zipindexop(): Int {
    let l = List<Int>@{2, 7, 23};
    
    let ll = l.zipIndex();
    check ll.size() == 3;
    check ll.front().0 == 0;
    check ll.front().1 == 2;
    check ll.get(1).0 == 1;
    check ll.get(1).1 == 7;
    check ll.back().0 == 2;
    check ll.back().1 == 23;

    return 0;
}

entrypoint function joinop(): Int {
    let l = List<Int>@{2, 7, 4};
    let ol = List<Int>@{1, 3, 5};
    
    let ll = l.join<Int>(ol, fn(a, b) => a < b);
    //List{[2, 3], [2, 5], [4, 5]}
    check ll.size() == 3;
    check ll.front().0 == 2;
    check ll.front().1 == 3;
    check ll.get(1).0 == 2;
    check ll.get(1).1 == 5;
    check ll.back().0 == 4;
    check ll.back().1 == 5;

    return 0;
}

entrypoint function joingroupop(): Int {
    let l = List<Int>@{2, 7, 4};
    let ol = List<Int>@{1, 3, 5};
    
    let ll = l.joinGroup<Int>(ol, fn(a, b) => a < b);
    //List{[2, [3, 5], [7, []], [4, [5]]}
    check ll.size() == 3;
    check ll.front().0 == 2;
    check ll.front().1.size() == 2;
    check ll.get(1).0 == 7;
    check ll.get(1).1.size() == 0;
    check ll.back().0 == 4;
    check ll.back().1.size() == 1;

    return 0;
}

entrypoint function appendop(): Int {
    let l = List<Int>@{2, 7};
    let ll = List<Int>@{4};
    
    let lp = l.append(ll);
    check lp.size() == 3;
    check lp.front() == 2;
    check lp.get(1) == 7;
    check lp.back() == 4;

    return 0;
}

entrypoint function prependop(): Int {
    let l = List<Int>@{2, 7};
    let ll = List<Int>@{4};
    
    let lp = ll.prepend(l);
    check lp.size() == 3;
    check lp.front() == 2;
    check lp.get(1) == 7;
    check lp.back() == 4;

    return 0;
}

entrypoint function partitionop(): Int {
    let l = List<Int>@{2, -2, 0, 1};
    
    let pp = l.partition<Int>(fn(a) => a >= 0 ? a : -a);
    check pp.size() == 3;
    check pp.get(2).size() == 2;
    check pp.get(2).front() == 2;
    check pp.get(2).back() == -2;
    check pp.get(1).size() == 1;
    check pp.get(1).front() == 1;

    return 0;
}

entrypoint function sort(): Int {
    let l = List<Int>@{2, 7, 23, 0};
    
    let ll = l.sort(fn(a, b) => a < b);
    check ll.size() == 4;
    check ll.front() == 0;
    check ll.back() == 23;

    return 0;
}

entrypoint function toindexmapop(): Int {
    let l = List<Int>@{2, 7, 0};

    let ll = l.toIndexMap();
    check ll.size() == 3;
    check ll.get(0) == 2;
    check ll.get(1) == 7;
    check ll.get(2) == 0;

    return 0;
}

entrypoint function transformtoindexmapop(): Int {
    let l = List<Int>@{2, -2, 0};

    let ll = l.transformToIndexMap<Bool>(fn(x) => x >= 0);
    check ll.size() == 3;
    check ll.get(0);
    check !ll.get(1);
    check ll.get(2);

    return 0;
}

entrypoint function transformtomapop(): Int {
    let l = List<Int>@{2, -2, 0};

    let ll = l.transformToMap<Int, Bool>(fn(x) => x + 1, fn(x) => x >= 0);
    check ll.size() == 3;
    check ll.get(3);
    check !ll.get(-1);
    check ll.get(1);

    return 0;
}

entrypoint function transformtomaperr(): Int {
    let l = List<Int>@{2, -2, 0};

    let ll = l.transformToMap<Int, Bool>(fn(x) => x >= 0 ? x : -x, fn(x) => x >= 0);
    return ll.size();
}

