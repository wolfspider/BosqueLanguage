//-------------------------------------------------------------------------------------------------------
// Copyright (C) Microsoft. All rights reserved.
// Licensed under the MIT license. See LICENSE.txt file in the project root for full license information.
//-------------------------------------------------------------------------------------------------------

namespace NSTest;

entrypoint function zipop(): Int {
    let lu = List<Int>@{1, -1, 2};
    let lv = List<Bool>@{true, false, true};

    let ll = ListOf::zip<Int, Bool>(lu, lv);
    check ll.size() == 3;
    check ll.front().0 == 1;
    check ll.front().1;
    check ll.get(1).0 == -1;
    check !ll.get(1).1;
    check ll.back().0 == 2;
    check ll.back().1;

    return 0;
}

entrypoint function ziperr(): Int {
    let lu = List<Int>@{1, -1, 2};
    let lv = List<Bool>@{true, false};

    let ll = ListOf::zip<Int, Bool>(lu, lv);
    return ll.size();
}

entrypoint function unzipop(): Int {
    let lz = List<[Int, Bool]>@{[1, true], [-1, false], [2, true]};

    let lu, lv = ListOf::unzip<Int, Bool>(lz);
    check lu.front() == 1;
    check lv.front();
    check lu.get(1) == -1;
    check !lv.get(1);
    check lu.back() == 2;
    check lv.back();

    return 0;
}

entrypoint function rangeop(): Int {
    let l = ListOf::range(2, 5);

    check l.size() == 3;
    check l.front() == 2;
    check l.get(1) == 3;
    check l.back() == 4;

    let ln = ListOf::range(-2, 1);

    check ln.size() == 3;
    check ln.front() == -2;
    check ln.get(1) == -1;
    check ln.back() == 0;

    return 0;
}

entrypoint function rangeerr(): Int {
    let l = ListOf::range(3, 2);
    return l.size();
}