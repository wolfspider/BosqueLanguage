//-------------------------------------------------------------------------------------------------------
// Copyright (C) Microsoft. All rights reserved.
// Licensed under the MIT license. See LICENSE.txt file in the project root for full license information.
//-------------------------------------------------------------------------------------------------------

namespace NSTest;

concept Bar {
    field x: Indexable;
    field y: Int = 3;
}

concept Baz {
    field z: Bool;
}

entity E0 provides Bar {
}

entity E1 provides Bar, Baz {
    field f: Int;

    factory static create(arg: Int): {x: Indexable, y: Int, z: Bool, f: Int} {
        return { x=none, y=1, z=true, f=3 };
    }
    factory static creat<T>(arg: T): {x: T, y: Int, z: Bool, f: Int} {
        return { x=arg, y=1, z=true, f=3 };
    }
}

entity E2<T> {
    field f: T;
    field g: Indexable;
    
    factory static create(arg: T): {f: T, g: Int} {
        return { f=arg, g=1 };
    }
    factory static creat<U where Indexable>(x: T, y: U): {f: T, g: U} {
        return { f=x, g=y };
    }
}

entity ENested {
    field t: [Int, Bool] = [0, false];
    field r: {f: Int};
    field o: E2<Int>;
}

entrypoint function createObjSimple(): Bool {
    let o = E1@{ x=none, y=1, z=true, f=3 };

    check o.x == none && o.y == 1 && o.z && o.f == 3;
    return true;
}

entrypoint function createObjDefault(): Bool {
    let o = E1@{ x=none, z=true, f=3 };

    check o.x == none && o.y == 3 && o.z && o.f == 3;
    return true;
}

entrypoint function createObjExpando(): Bool {
    let o = E1@{ ...{ x=none, z=true, f=3 } };

    check o.x == none && o.y == 3 && o.z && o.f == 3;
    return true;
}

entrypoint function createObjFactory(): Bool {
    let o = E1@create(3);

    check o.x == none && o.y == 1 && o.z && o.f == 3;
    return true;
}

entrypoint function createObjFactoryTemplate(): Bool {
    let o = E1@creat<String>("ok");

    check o.x.as<String>() == "ok" && o.y == 1 && o.z && o.f == 3;
    return true;
}

entrypoint function createObjTFactory(): Bool {
    let o = E2<Int>@create(3);

    check o.f == 3 && o.g.as<Int>() == 1;
    return true;
}

entrypoint function createObjTFactoryTemplate(): Bool {
    let o = E2<Int>@creat<String>(3, "ok");

    check o.f == 3 && o.g.as<String>() == "ok";
    return true;
}

entrypoint function createObjNested(): Bool {
    let o = ENested@{r={f=1}, o=E2<Int>@create(3)};

    check !o.t.1 && o.r.f == 1 && o.o.f == 3;
    return true;
}


entrypoint function puzzle1(x: Int, b: Bool): Int {
    let o: Bar = b ? E0@{x=none} : E1@{x=none, z=true, f=3};

    check x != o.y;
    return 0;
}

entrypoint function puzzle2(x: Int, b: Bool): Int {
    let o1: Bar = E0@{x=none, y=x};
    let o2 = b ? E0@{x=none, y=x} : E1@{x=none, y=x, z=true, f=3};

    check o1.y == o2.y;
    return 0;
}