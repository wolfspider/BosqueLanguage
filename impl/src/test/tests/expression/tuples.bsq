//-------------------------------------------------------------------------------------------------------
// Copyright (C) Microsoft. All rights reserved.
// Licensed under the MIT license. See LICENSE.txt file in the project root for full license information.
//-------------------------------------------------------------------------------------------------------

namespace NSTest;

function maybeTuple(b: Bool): [Int]? {
    return b ? [ 3 ] : none;
}

entrypoint function emptyTuple(): [] {
    return [];
}

entrypoint function oneTuple(): [Int] {
    return [ 1 ];
}

entrypoint function fourTuple(): [Int, Int, None, Bool] {
    return [ 1, 2, none, true ];
}

entrypoint function nestedTuples(): [Int, [None, []]] {
    return [ 1, [ none, [] ] ];
}

entrypoint function getIndex(): Int {
    return [1].0;
}

entrypoint function getIndexOpt(): Int? {
    return [].1;
}

entrypoint function getIndexBailout(b: Bool): Int? {
    return maybeTuple(b)?.0;
}

entrypoint function projectIndecies(): [Int] {
    return [ 1, 2 ].[1];
}

entrypoint function projectIndeciesOpt(): [Int, Int?] {
    return [ 1, 2 ].[1, 5];
}

entrypoint function projectIndeciesBailout(b: Bool): [Int, Int?]? {
    return maybeTuple(b)?.[0, 1];
}

entrypoint function projectIndeciesC(): Int {
    return [ 1, 2 ].[1, 5].0;
}

entrypoint function modifyIndecies(): [Int, Int] {
    return [ 1, 2 ].update(1=5);
}

entrypoint function modifyIndeciesOpt(): [Int, Int, None, None, Int] {
    return [ 1, 2 ].update(1=5, 4=4);
}

entrypoint function modifyIndeciesBailout(b: Bool): [Int]? {
    return maybeTuple(b)?.update(0=5);
}

entrypoint function modifyIndeciesC(): Int {
    return [ 1, 2 ].update(1=5).1;
}

entrypoint function extendTupleType(): [Bool, Bool, Int] {
    return [ true, false ].merge([ 3 ]);
}

entrypoint function extendTupleTypeBailout(b: Bool): [Int, Int, Int]? {
    return maybeTuple(b)?.merge([ 3, 4 ]);
}

entrypoint function extendTupleTypeC(): Int {
    return [ true, false ].merge([ 3 ]).2;
}

