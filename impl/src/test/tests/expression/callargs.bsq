//-------------------------------------------------------------------------------------------------------
// Copyright (C) Microsoft. All rights reserved.
// Licensed under the MIT license. See LICENSE.txt file in the project root for full license information.
//-------------------------------------------------------------------------------------------------------

namespace NSTest;

function emptyArgs(): Int {
    return 0;
}

function requiredArgs(v1: Int, v2: Int): Int {
    return v1 + v2;
}

function optionalArgs(v1?: Int, v2?: Int): Int? {
    return (v1 ?& v2 ?& v1 + v2);
}

function mixedArgs(v1: Int, v2?: Int): Int {
    return (v2 ?& v1 + v2) ?| -1;
}

function identityAny<T>(x: T): T {
    return x;
}

function identityInt<T where Int>(x: T): T {
    return x;
}

function prePost(arg: Int): Int?
    requires 2 < arg && arg < 10;
    ensures $return != none;
{
    return arg + 1;
}

function lambdaArgument(f: fn(_: Int) -> Int, x: Int): Int {
    return f(x);
}

entrypoint function emptyArgsTest(): Int {
    return emptyArgs();
}

entrypoint function requiredArgsTest(): Int {
    return requiredArgs(1, 2);
}

entrypoint function optionalArgsTest0(): Int? {
    return optionalArgs();
}

entrypoint function optionalArgsTest1(): Int? {
    return optionalArgs(1);
}

entrypoint function optionalArgsTest2(): Int? {
    return optionalArgs(1, 2);
}

entrypoint function mixedArgsTest1(): Int {
    return mixedArgs(1);
}

entrypoint function mixedArgsTest2(): Int {
    return mixedArgs(1, 2);
}

entrypoint function optionalArgsNamedTest1(): Int? {
    return optionalArgs(3, v1=1);
}

entrypoint function optionalArgsNamedTest2(): Int? {
    return optionalArgs(v2=1, 3);
}

entrypoint function mixedArgsNamedTest1(): Int {
    return mixedArgs(v1=1);
}

entrypoint function mixedArgsNamedTest2(): Int {
    return mixedArgs(v2=1, v1=2);
}

entrypoint function identityAnyTest(): Int | String {
    let x = identityAny<Int>(3);
    return x == 3 ? identityAny<Int | String>(1) : 2;
}

entrypoint function identityIntTest(): Int {
    let x = identityInt<Int>(3);
    return x == 3 ? identityInt<Int>(1) : 2;
}

entrypoint function prePostTest(): Int?
{
    return prePost(3);
}

entrypoint function lambdaArgumentTest(): Int {
    return lambdaArgument(fn(x: Int): Int => { return Math::mult(x, 2); }, 3);
}

entrypoint function lambdaArgumentInferTest(): Int {
    return lambdaArgument(fn(x) => Math::mult(x, 2), 3);
}

entrypoint function prePostCheck(i: Int): Int
{
    return prePost(i) ?| 0;
}

entrypoint function puzzle(i: Int): Int {
    assert mixedArgs(3, v1=i) == 11;
    return 1;
}