//-------------------------------------------------------------------------------------------------------
// Copyright (C) Microsoft. All rights reserved.
// Licensed under the MIT license. See LICENSE.txt file in the project root for full license information.
//-------------------------------------------------------------------------------------------------------

namespace NSTest;

entrypoint function eif_abs1(x: Int): Int {
    let y = if(x < 0) -x else x;
    return y;
}

entrypoint function eif_abs2(x: Int): Int {
    return if(x < 0) {|
        yield -x;
    |}
    else {|
        yield x;
    |};
}

entrypoint function eif_absy_none(b: Bool): Int {
    let x = b ? 1 : none;
    return if(x == none) 0 else {|
        var y = x;
        if(y < 0) {
            y = -y;
        }
        yield y;
    |};
}

entrypoint function eif_absy_1(b: Bool): Int {
    let x = b ? 1 : none;
    return if(x == none)
        0
    else {|
        var y = x;
        if(y < 0) {
            y = -y;
        }
        yield y;
    |};
}

entrypoint function enestif_abs1(b: Bool): Int {
    let x = b ? -3 : none;
    let y = if(x == none) 0 elif(x > 0) x else -x;
    return y;
}

entrypoint function eif_absy_noneC(): Int {
    return eif_absy_none(true) + eif_absy_none(false);
}

entrypoint function enestif_abs1C(b: Bool): Int {
    return enestif_abs1(true) + enestif_abs1(false);
}

entrypoint function check1(v: Int): Int {
    assert eif_abs1(v) >= 0;
    return v;
}

entrypoint function check2(v: Int): Int {
    assert eif_abs2(v) > 0;
    return v;
}

entrypoint function puzzle(b1: Bool, v: Int, b3: Bool): Int {
    assert eif_absy_none(b1) != 0;
    assert eif_abs2(v) != 11;
    assert enestif_abs1(b3) != 3;
    return 1;
}
