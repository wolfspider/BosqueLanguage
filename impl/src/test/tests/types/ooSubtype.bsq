//-------------------------------------------------------------------------------------------------------
// Copyright (C) Microsoft. All rights reserved.
// Licensed under the MIT license. See LICENSE.txt file in the project root for full license information.
//-------------------------------------------------------------------------------------------------------

namespace NSTest;

function makeOrNone<T>(v: T): T? {
    return v;
}

function makeValue<T>(v: T): Any {
    return v;
}

function makeConcept<U, T>(v: T): U {
    return v;
}

function checkerAny<U>(v: Any): Bool {
    return v.is<U>();
}

function checker<T, U>(v: T): Bool {
    return v.is<U>();
}

concept TA {
}

concept TB provides TA {
}

concept TC provides TA {
}

concept TD provides TB, TC {
}

entity Simple {
}

entity TEB provides TB {
}

entity TED provides TD {
}

entrypoint function simpleEntityAnyTests(): Int {
    let nv = makeValue<Simple>(Simple@{});

    check checkerAny<Simple>(nv);
    check checkerAny<Any>(nv);
    check checkerAny<Some>(nv);
    check checkerAny<Object>(nv);

    check !checkerAny<None>(nv);
    check !checkerAny<Int>(nv);
    check !checkerAny<[Int, Int]>(nv);
    check !checkerAny<{f:Int, g:Int}>(nv);
    check !checkerAny<List<Int>>(nv);
    check !checkerAny<TB>(nv);

    check checkerAny<Simple | Int>(nv);
    check !checkerAny<None | Int>(nv);
    check !checkerAny<Int | Tuple>(nv);

    return 1;
}

entrypoint function simpleEntityOrNoneTests(): Int {
    let nv = Simple@{};

    check checker<Simple, Simple>(nv);
    check checker<Simple, Any>(nv);
    check checker<Simple, Some>(nv);
    check checker<Simple, Object>(nv);

    check !checker<Simple, None>(nv);
    check !checker<Simple, Int>(nv);
    check !checker<Simple, [Int, Int]>(nv);
    check !checker<Simple, {f:Int, g:Int}>(nv);
    check !checker<Simple, List<Int>>(nv);
    check !checker<Simple, TB>(nv);

    check checker<Simple, Simple | Int>(nv);
    check !checker<Simple, None | Int>(nv);
    check !checker<Simple, Int | String>(nv);

    return 1;
}

entrypoint function ebEntityAnyTests(): Int {
    let nv = makeValue<TEB>(TEB@{});

    check checkerAny<TEB>(nv);
    check checkerAny<Any>(nv);
    check checkerAny<Some>(nv);
    check checkerAny<Object>(nv);
    check checkerAny<TB>(nv);
    check checkerAny<TA>(nv);

    check !checkerAny<None>(nv);
    check !checkerAny<Int>(nv);
    check !checkerAny<[Int, Int]>(nv);
    check !checkerAny<{f:Int, g:Int}>(nv);
    check !checkerAny<List<Int>>(nv);
    check !checkerAny<TC>(nv);
    check !checkerAny<TB&TC>(nv);
    check !checkerAny<TD>(nv);

    check checkerAny<TB | Simple | Int>(nv);
    check !checkerAny<None | Int>(nv);
    check !checkerAny<Int | TC>(nv);

    return 1;
}

entrypoint function ebEntityOrNoneTests(): Int {
    let nv = makeOrNone<TEB>(TEB@{});

    check checker<TEB?, TEB>(nv);
    check checker<TEB?, Any>(nv);
    check checker<TEB?, Some>(nv);
    check checker<TEB?, Object>(nv);
    check checker<TEB?, TB>(nv);
    check checker<TEB?, TA>(nv);

    check !checker<TEB?, None>(nv);
    check !checker<TEB?, Int>(nv);
    check !checker<TEB?, [Int, Int]>(nv);
    check !checker<TEB?, {f:Int, g:Int}>(nv);
    check !checker<TEB?, List<Int>>(nv);
    check !checker<TEB?, TC>(nv);
    check !checker<TEB?, TB&TC>(nv);
    check !checker<TEB?, TD>(nv);

    check checker<TEB?, TB | Simple | Int>(nv);
    check !checker<TEB?, None | Int>(nv);
    check !checker<TEB?, Int | TC>(nv);

    return 1;
}

entrypoint function edEntityAnyTests(): Int {
    let nv = makeValue<Any>(TED@{});

    check checkerAny<TED>(nv);
    check checkerAny<Any>(nv);
    check checkerAny<Some>(nv);
    check checkerAny<Object>(nv);
    check checkerAny<TB>(nv);
    check checkerAny<TA>(nv);
    check checkerAny<TB&TC>(nv);
    check checkerAny<TD>(nv);

    check !checkerAny<None>(nv);
    check !checkerAny<Int>(nv);
    check !checkerAny<[Int, Int]>(nv);
    check !checkerAny<{f:Int, g:Int}>(nv);
    check !checkerAny<List<Int>>(nv);

    check checkerAny<TB | Simple | Int>(nv);
    check !checkerAny<None | Int>(nv);
    check !checkerAny<Int | String>(nv);

    return 1;
}

entrypoint function ebConceptTests(): Int {
    let nv = makeConcept<TA, TEB>(TEB@{});

    check checker<TA, TEB>(nv);
    check checker<TA, Any>(nv);
    check checker<TA, Some>(nv);
    check checker<TA, Object>(nv);
    check checker<TA, TB>(nv);
    check checker<TA, TA>(nv);

    check !checker<TA, None>(nv);
    check !checker<TA, Int>(nv);
    check !checker<TA, [Int, Int]>(nv);
    check !checker<TA, {f:Int, g:Int}>(nv);
    check !checker<TA, List<Int>>(nv);
    check !checker<TA, TC>(nv);
    check !checker<TA, TB&TC>(nv);
    check !checker<TA, TD>(nv);

    check checker<TA, TB | Simple | Int>(nv);
    check !checker<TA, None | Int>(nv);
    check !checker<TA, Int | TC>(nv);

    return 1;
}

entrypoint function edConceptTests(): Int {
    let nv = makeConcept<TB&TC, TED>(TED@{});

    check checker<TB&TC, TED>(nv);
    check checker<TB&TC, Any>(nv);
    check checker<TB&TC, Some>(nv);
    check checker<TB&TC, Object>(nv);
    check checker<TB&TC, TB>(nv);
    check checker<TB&TC, TA>(nv);
    check checker<TB&TC, TB&TC>(nv);
    check checker<TB&TC, TD>(nv);

    check !checker<TB&TC, None>(nv);
    check !checker<TB&TC, Int>(nv);
    check !checker<TB&TC, [Int, Int]>(nv);
    check !checker<TB&TC, {f:Int, g:Int}>(nv);
    check !checker<TB&TC, List<Int>>(nv);

    check checker<TB&TC, TB | Simple | Int>(nv);
    check !checker<TB&TC, None | Int>(nv);
    check !checker<TB&TC, Int | String>(nv);

    return 1;
}
