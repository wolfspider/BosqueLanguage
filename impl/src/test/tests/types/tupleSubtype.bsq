//-------------------------------------------------------------------------------------------------------
// Copyright (C) Microsoft. All rights reserved.
// Licensed under the MIT license. See LICENSE.txt file in the project root for full license information.
//-------------------------------------------------------------------------------------------------------

namespace NSTest;

function makeValue<T>(v: T): T {
    return v;
}

function checkerAny<U>(v: Any): Bool {
    return v.is<U>();
}

function checker<T, U>(v: T): Bool {
    return v.is<U>();
}

entrypoint function tupleTests(): Int {
    let nv = makeValue<[Int, Int, ?:Int]>([1, 2]);

    check checker<[Int, Int, ?:Int], [Int, Int]>(nv);
    check checker<[Int, Int, ?:Int], [Int, ?:Int]>(nv);
    check checker<[Int, Int, ?:Int], [Int, Int, ?:Int, ?:Int]>(nv);
    check checker<[Int, Int, ?:Int], Any>(nv);
    check checker<[Int, Int, ?:Int], Some>(nv);

    check !checker<[Int, Int, ?:Int], None>(nv);
    check !checker<[Int, Int, ?:Int], Int>(nv);
    check !checker<[Int, Int, ?:Int], [Int, Int, Int]>(nv);
    check !checker<[Int, Int, ?:Int], {f:Int, g:Int}>(nv);
    check !checker<[Int, Int, ?:Int], Object>(nv);
    check !checker<[Int, Int, ?:Int], List<Int>>(nv);

    check checker<[Int, Int, ?:Int], [Int, Int] | Int>(nv);
    check !checker<[Int, Int, ?:Int], Int | String>(nv);

    return 1;
}

entrypoint function tupleAnyTests(): Int {
    let nv = makeValue<Any>([1, 2]);

    check checkerAny<[Int, Int]>(nv);
    check checkerAny<[Int, ?:Int]>(nv);
    check checkerAny<[Int, Int, ?:Int, ?:Int]>(nv);
    check checkerAny<Any>(nv);
    check checkerAny<Some>(nv);

    check !checkerAny<None>(nv);
    check !checkerAny<Int>(nv);
    check !checkerAny<[Int, Int, Int]>(nv);
    check !checkerAny<{f:Int, g:Int}>(nv);
    check !checkerAny<Object>(nv);
    check !checkerAny<List<Int>>(nv);

    check checkerAny<[Int, Int] | Int>(nv);
    check !checkerAny<Int | String>(nv);

    return 1;
}

entrypoint function tupleContentsTests(): Int {
    let nv = makeValue<[Int, Bool, ?:Int, ?:String]>([1, true, 3]);

    check checker<[Int, Bool, ?:Int, ?:String], [Int, Bool, Any, Int]>(nv);
    check checker<[Int, Bool, ?:Int, ?:String], [Int, Any, Any]>(nv);

    check checkerAny<[Int, Bool, Any]>(nv);
    check checkerAny<[Int, Any, Any]>(nv);

    check checker<[Int, Any, ?:Int, ?:String], [Int, Bool, Any]>(nv);
    check checker<[Any, Bool, ?:Int, ?:String], [Any, Any, ?:Any]>(nv);

    check !checker<[Int, Bool, ?:Int, ?:String], [Int, Int, Any]>(nv);
    check !checker<[Int, Bool, ?:Int, ?:String], [Int, Any]>(nv);

    check !checkerAny<[Int, Int, Any]>(nv);
    check !checkerAny<[Int, Any]>(nv);

    check !checker<[Int, Any, ?:Int, ?:String], [Int, Int, Any]>(nv);
    check !checker<[Any, Bool, ?:Int, ?:String], [Any, Any]>(nv);

    return 1;
}
