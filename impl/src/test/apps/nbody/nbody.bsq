//-------------------------------------------------------------------------------------------------------
// Copyright (C) Microsoft. All rights reserved.
// Licensed under the MIT license. See LICENSE.txt file in the project root for full license information.
//-------------------------------------------------------------------------------------------------------

//
//This is a bosque test/benchmark for a nbody program -- based on https://benchmarksgame-team.pages.debian.net/benchmarksgame/description/nbody.html#nbody
//

namespace NSMain;

struct entity Vector3 {
   field x: Float64;
   field y: Float64;
   field z: Float64;

   const zero: Vector3 = Vector3@{0.0f, 0.0f, 0.0f};

   method add(v: Vector3): Vector3 {
      return Vector3@{this.x + v.x, this.y + v.y, this.z + v.z};
   } 

   method sub(v: Vector3): Vector3 {
      return Vector3@{this.x - v.x, this.y - v.y, this.z - v.z};
   }

   method scale(s: Float64): Vector3 {
      return Vector3@{this.x * s, this.y * s, this.z * s};
   }

   method magnitude(): Float64 {
      return (this.x.square() + this.y.square() + this.z.square()).sqrt();
   }

   static distance(v1: Vector3, v2: Vector3): Float64 {
      return ((v1.x - v2.x).square() + (v1.y - v2.y).square() + (v1.z - v2.z).square()).sqrt();
   }

   static sum(l: List<Vector3>): Vector3 {
      return NSIterate::reduce<Vector3>(Vector3::zero, l, fn(a, b) => a.add(b), true);
   }
}

entity Body {
   const pi: Float64 = 3.141592653589793f;
   const solar_mass: Float64 = 4.0f * Body::pi * Body::pi;
   const days_per_year: Float64 = 365.24f;

   field name: String;
   field mass: Float64;
   field pos: Vector3;
   field vel: Vector3;

   const jupiter: Body = Body@{
      name="jupiter",
      mass=9.54791938424326609e-04f * Body::solar_mass,
      pos=Vector3@{4.84143144246472090e+00f, -1.16032004402742839e+00f, -1.03622044471123109e-01f},
      vel=Vector3@{1.66007664274403694e-03f * Body::days_per_year, 7.69901118419740425e-03f * Body::days_per_year, 6.90460016972063023e-05f * Body::days_per_year}
   };

   const saturn: Body = Body@{
      name="saturn",
      mass=2.85885980666130812e-04f * Body::solar_mass,
      pos=Vector3@{8.34336671824457987e+00f, 4.12479856412430479e+00f, 4.03523417114321381e-01f},
      vel=Vector3@{-2.76742510726862411e-03f * Body::days_per_year, 4.99852801234917238e-03f * Body::days_per_year, 2.30417297573763929e-05f * Body::days_per_year}
   };

   const uranus: Body = Body@{
      name="uranus",
      mass=4.36624404335156298e-05f * Body::solar_mass,
      pos=Vector3@{1.28943695621391310e+01f, -1.51111514016986312e+01f, -2.23307578892655734e-01f},
      vel=Vector3@{2.96460137564761618e-03f * Body::days_per_year, 2.37847173959480950e-03f * Body::days_per_year, -2.96589568540237556e-05f * Body::days_per_year}
   };

   const neptune: Body = Body@{
      name="neptune",
      mass=5.15138902046611451e-05f * Body::solar_mass,
      pos=Vector3@{1.53796971148509165e+01f, -2.59193146099879641e+01f, 1.79258772950371181e-01f},
      vel=Vector3@{2.68067772490389322e-03f * Body::days_per_year, 1.62824170038242295e-03f * Body::days_per_year, -9.51592254519715870e-05f * Body::days_per_year} 
   };

   const sun: Body = Body@{
      name="sun",
      mass=Body::solar_mass,
      pos=Vector3::zero,
      vel=Vector3::zero
   };
}

entity NBodySystem {
   field bodies: List<Body>;

   factory static create(): { bodies: List<Body> } {
      let planets = List<Body>@{
         Body::jupiter,
         Body::saturn,
         Body::uranus,
         Body::neptune
      };

      let px = Float64::sum(planets.map<Float64>(fn(p) => p.vel.x * p.mass));
      let py = Float64::sum(planets.map<Float64>(fn(p) => p.vel.y * p.mass));
      let pz = Float64::sum(planets.map<Float64>(fn(p) => p.vel.z * p.mass));
      let sunv = Vector3@{ -px / Body::solar_mass, -py / Body::solar_mass, -pz / Body::solar_mass };

      return { bodies=List<Body>@{Body::sun.update(vel=sunv), Body::jupiter, Body::saturn, Body::uranus, Body::neptune} };
   }

   method energy(): Float64 {
      let keneticEnergies = this.bodies.map<Float64>(fn(b) => {
         let vv = b.vel;
         let vs = (vv.x.square() + vv.y.square() + vv.z.square());
         return 0.5f * b.mass * vs;
      });

      let ppairs = this.bodies.join<Body>(this.bodies, fn(b1, b2) => b1.name != b2.name);
      let potentialEnergies = ppairs.map<Float64>(fn(bp) => {
         return (bp.0.mass * bp.1.mass) / Vector3::distance(bp.0.pos, bp.1.pos);
      });
      
      return Float64::sum(keneticEnergies) - Float64::sum(potentialEnergies);
   }

   method advance(dt: Float64): NBodySystem {
      let nbodies = this.bodies.map<Body>(fn(b) => {
         let deltas = this.bodies
            .filter(fn(bb) => bb.name != b.name)
            .map<Vector3>(fn(bb) => {
               let dist = Vector3::distance(b.pos, bb.pos);
               let mag = dt / Float64::pow(dist, 3f);

               return (bb.pos.sub(b.pos)).scale(bb.mass * mag);
            });

         let nvel = b.vel.add(Vector3::sum(deltas));
         let npos = b.pos.add(nvel.scale(dt));

         return b.update(vel=nvel, pos=npos);
      });

      return NBodySystem@{ bodies=nbodies };
   }
}

entrypoint function main(): Float64 {
   let rsystem = NBodySystem@create().advance(0.01f);
   //let rsystem = NSIterate::steps<NBodySystem>(NBodySystem@create(), 50000000, fn(state) => state.advance(0.01f));

   return rsystem.energy();
}
