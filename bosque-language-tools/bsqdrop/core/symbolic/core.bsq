//-------------------------------------------------------------------------------------------------------
// Copyright (C) Microsoft. All rights reserved.
// Licensed under the MIT license. See LICENSE.txt file in the project root for full license information.
//-------------------------------------------------------------------------------------------------------

//The core namespace implements the primitive types used in the Bosque language
namespace NSCore;

//<summary>Special type which all values are instances of.</summary>
concept Any {
    method is<T>(): Bool # special_method
    method as<T>(): T # special_method

    method tryAs<T>(): T? # special_method
    method defaultAs<T>(default: T): T # special_method

    method isNone(): Bool # special_method
    method isSome(): Bool # special_method
}

//<summary>Special type for representing all non-none values.</summary>
concept Some provides Any {
    method update(): Some # special_method
    method merge(): Some # special_method
    method project<T>(): Some # special_method
    method tryProject<T>(): Some? # special_method
}

//<summary>A marker concept that indicates a type has a convert method that will allow conversion to a supertype -- used for method override contravariance</summary>
concept Convertable provides Any {
}

//<summary>Special type for indicating this type supports typed string use.</summary>
concept Parsable provides Any {
    abstract static tryParse(str: String): Result<Any, String>;
}

//<summary>Special type that all Validator (regex etc.) types provide.</summary>
concept Validator provides Any {
    abstract static accepts(str: String): Bool; 
}

//<summary>Special type for indicating a value can be used as a key in a collection.</summary>
concept KeyType provides Any {
    static equal(a: KeyType, b: KeyType): Bool # special_method
    static less(a: KeyType, b: KeyType): Bool # special_method
}

//<summary>Type for indicating that a datatype is Plain-Old-Data.</summary>
concept PODType provides APIType {
    static bufferify<T where PODType>(data: T, format?: BufferFormat, encoding?: BufferEncoding, compression?: BufferCompression): Buffer<T> # pod_bufferify
    static parseBuffer<T where PODType>(data: Buffer<T>): T # pod_parsebuffer
    static tryParseBuffer<T where PODType>(data: Buffer<T>): Result<T, String> # pod_tryparsebuffer
}

//<summary>Type to unify Buffers and APITypes at top level for checking</summary>
concept APIValue provides Any {
}

//<summary>Type for indicating that a datatype can be exported as part of a stable API.</summary>
concept APIType provides APIValue {
    static bufferify<T where APIType>(data: T, format?: BufferFormat, encoding?: BufferEncoding, compression?: BufferCompression): Buffer<T> # api_bufferify
    static parseBuffer<T where APIType>(data: Buffer<T>): T # api_parsebuffer
    static tryParseBuffer<T where APIType>(data: Buffer<T>): Result<T, String> # api_tryparsebuffer
}

//<summary>Type for representing the none-value.</summary>
struct concept Truthy provides KeyType, Parsable {
    static truth(v: Truthy): Bool {
        return !!v;
    }

    override static tryParse(str: String): Result<Truthy, String> {
        if(str == "none") {
            return ok(none);
        }
        elif(str == "false") {
            return ok(false);
        }
        elif(str == "true") {
            return ok(true);
        }
        else {
            return err("Expected Truthy");
        }
    }
}

//<summary>Type for representing the none-value.</summary>
struct entity None provides Truthy, PODType, APIType {
    override static tryParse(str: String): Result<None, String> {
        if(str == "none") {
            return ok(none);
        }
        else {
            return err("Expected None");
        }
    }
}

//<summary>Primitive boolean value.</summary>
struct entity Bool provides Some, Truthy, PODType, APIType {
    override static tryParse(str: String): Result<Bool, String> {
        if(str == "false") {
            return ok(false);
        }
        elif(str == "true") {
            return ok(true);
        }
        else {
            return err("Expected Bool");
        }
    }

    static stringify(b: Bool): String {
        return b ? "true" : "false";
    }

    static parse(str: String): Bool {
        check str == "false" || str == "true";
        return (str == "false") ? false : true;
    }
}

//<summary>Primitive integer value.</summary>
struct entity Int provides KeyType, Parsable, PODType, APIType, Some {
    const min_value: Int = -9007199254740991;
    const max_value: Int = 9007199254740991;

    override static tryParse(str: String): Result<Int, String> # int_tryparse

    static stringify(i: Int): String # int_tostring
    static parse(str: String): Int # int_parse

    static max(v1: Int, v2: Int): Int {
        return v1 > v2 ? v1 : v2;
    }

    static min(v1: Int, v2: Int): Int {
        return v1 < v2 ? v1 : v2;
    }

    static mod(a: Int, b: Int): Int # int_mod
}

//<summary>Primitive big-integer value.</summary>
entity BigInt provides KeyType, Parsable, PODType, APIType, Some {
    override static tryParse(str: String): Result<BigInt, String> # bigint_tryparse

    static stringify(i: BigInt): String # bigint_tostring
    static parse(str: String): BigInt # bigint_parse

    static fromInt(i: Int): BigInt # bigint_fromint

    method isSafeInt(): BigInt # bigint_issafeint
    method toInt(): Int # bigint_toint 
}

//<summary>Primitive float 64 value.</summary>
struct entity Float64 provides Parsable, PODType, APIType, Some {
    override static tryParse(str: String): Result<Float64, String> # float64_tryparse

    static stringify(f: Float64): String # float64_tostring
    static parse(str: String): Float64 # float64_parse

    static less(f1: Float64, f2: Float64, epsilon?: Float64): Bool # float64_less
}

//<summary>Primitive string value.</summary>
entity String provides KeyType, PODType, APIType, Some {
    private static s_length(s: String): Int # string_count
    private static s_charat(s: String): Int # string_charat

    private static s_concat2(s1: String, s2: String): String # string_concat

    private recursive static s_concat(sl: List<String>, idx: Int, rs: String): String {
        if(idx == List<String>::s_size(sl)) {
            return rs;
        }
        else {
            let s = List<String>::s_unsafe_get(sl, idx);
            return String::s_concat[recursive](sl, idx + 1, String::s_concat2(rs, s));
        }
    }

    private static s_rangeInBounds(str: String, start: Int?, end: Int?): Bool {
        let s, e = start ?| 0, end ?| String::s_length(str);
        return 0 <= s && s <= e && e <= String::s_length(str);
    }

    private static s_substring(s: String, start: Int, end: Int): String # string_substring

    method length(): Int {
        return String::s_length(this);
    }

    method charAt(idx: Int): String
        requires release 0 <= idx && idx < String::s_length(this);
    {
        return String::s_charat(this, idx);
    }

    static concat(...args: List<String>): String {
        if(List<String>::s_size(args) == 0) {
            return "";
        }
        elif(List<String>::s_size(args) == 1) {
            return args->front();
        }
        else {
            return String::s_concat[recursive](args, 1, args->front());
        }
    }

    method substring(start?: Int, end?: Int): String
        requires release String::s_rangeInBounds(this, start, end);
    {
        let s, e = start ?| 0, end ?| String::s_length(this);
        return String::s_substring(this, s, e);
    }

    method includes(str: String): Bool # string_includes
    method startsWith(str: String): Bool # string_startswith
    method endsWith(str: String): Bool # string_endswith

    method indexOf(str: String): Int # string_indexof
    method lastIndexOf(str: String): Int # string_indexof

    method split(sep: String): List<String> # string_indexof
    static join(sep: String, args: List<String>): String # string_join

    method trim(): String # string_trim
    method trimStart(): String # string_trimstart
    method trimEnd(): String # string_trimend

    static compare(a: String, b: String): Bool # string_compare
}

//<summary>Primitive safe string value.</summary>
entity SafeString<T where Validator> provides KeyType, Some, PODType, APIType, Convertable {
    private static s_unsafe_from(str: String): SafeString<T> # safestring_unsafe_from

    method string(): String # safestring_string

    static from(str: String): SafeString<T>
        requires release T::accepts(str);
    {
        return SafeString<T>::s_unsafe_from(str);
    }

    static tryFrom(str: String): SafeString<T>? {
        return T::accepts(str) ? SafeString<T>::s_unsafe_from(str) : none;
    }

    method convert<U where Validator>(): SafeString<U> # stringof_convert
    method tryConvert<U where Validator>(): SafeString<U>? # stringof_tryconvert
}

//<summary>Primitive stringof value.</summary>
entity StringOf<T where Parsable> provides APIValue, KeyType, Some, Convertable {
    private static s_unsafe_from(str: String): StringOf<T> # stringof_unsafe_from

    method string(): String # stringof_string

    static from(str: String): StringOf<T> 
        requires release T::tryParse(str)->isOk();
    {
        return StringOf<T>::s_unsafe_from(str);
    }

    static tryFrom(str: String): StringOf<T>? {
        return T::tryParse(str)->isOk() ? StringOf<T>::s_unsafe_from(str) : none;
    }

    method convert<U where Parsable>(): StringOf<U> # stringof_convert
    method tryConvert<U where Parsable>(): StringOf<U>? # stringof_tryconvert
}

//<summary>An efficient buffer encoding for data.</summary>
entity Buffer<T where PODType | APIType> provides APIValue, Some {
    method bytes(): ByteBuffer # buffer_bytes
}

//<summary>An efficient buffer encoding for data.</summary>
entity BufferOf<T where Parsable> provides APIValue, Some {
    method bytes(): ByteBuffer # bufferof_bytes
}

enum BufferFormat {
    char,
    bosque,
    ebosque,
    json
}

enum BufferEncoding {
    utf8,
    uri,
    base64,
    binary
}

enum BufferCompression {
    off,
    rle,
    time,
    space
}

//<summary>An efficient byte buffer for data.</summary>
entity ByteBuffer provides APIValue, Some {
}

//<summary>Primitive ISO standard date time value.</summary>
struct entity ISOTime provides Parsable, PODType, APIType, Some {
    override static tryParse(str: String): Result<ISOTime, String> # time_tryparse
}

//<summary>Primitive UUID value.</summary>
struct entity UUID provides KeyType, Parsable, PODType, APIType, Some {
    override static tryParse(str: String): Result<UUID, String> # uuid_tryparse
}

//<summary>All actual ordered event times implicitly provide this.</summary>
struct entity LogicalTime provides KeyType, Parsable, PODType, APIType, Some {
    override static tryParse(str: String): Result<LogicalTime, String> # logicaltime_tryparse

    static zero(): LogicalTime # logicaltime_zero
    static tick(t: LogicalTime): LogicalTime # logicaltime_tick
}

//<summary>Primitive hash value suitable for content addressable operations or crypto secure digests.</summary>
entity CryptoHash provides KeyType, Parsable, PODType, APIType, Some {
    static compute<T>(value: T): CryptoHash # cryptohash_compute

    override static tryParse(str: String): Result<CryptoHash, String> # cryptohash_tryparse
}

//<summary>All actual enums implicitly provide this.</summary>
concept Enum provides KeyType, Some {
}

//<summary>All actual custom keys implicitly provide this.</summary>
concept IdKey provides KeyType, Some {
}

//<summary>Primitive regex value.</summary>
entity Regex provides Some {
    method accepts(str: String, start?: Int, end?: Int): Bool # regex_accepts
    method match(str: String, start?: Int, end?: Int): RegexMatch # regex_match
    
    method matchAll(str: String, start?: Int, end?: Int): List<RegexMatch> # regex_matchall
}

entity RegexCapture provides Object {
    field index: Int;
    field length: Int;
    field value: String;
}

entity RegexGroup provides Object {
    field success: Bool;
    field name: String;
    field captures: List<RegexCapture>;
}

entity RegexMatch provides Object {
    field success: Bool;
    field index: Int;
    field length: Int;
    field value: String;
    field groups: List<RegexGroup>; 
}

//<summary>All actual tuples implicitly provide this concept.</summary>
concept Tuple provides Some {
}

//<summary>All actual records implicitly provide this concept.</summary>
concept Record provides Some {
}

struct entity MapEntry<K where KeyType, V> provides Some, Convertable, PODType when K PODType && V PODType, APIType when K APIType && V APIType {
    field key: K;
    field value: V;

    static create(k: K, v: V): MapEntry<K, V> {
        return MapEntry<K, V>@{ key=key, value=value };
    }

    method convert<T where KeyType, U>(): MapEntry<T, U> {
        return MapEntry<T, U>@{ key=this.key->as<T>(), value=this.value->as<U>() };
    }
}

//<summary>Providing this concept allows for an entity to be compared or stored in a key based container using the key field.</summary>
struct concept Result<T, E=None> provides Some, Convertable, PODType when T PODType && E PODType, APIType when T APIType && E APIType {   
    static createOk(result: T): Result<T, E> {
        return Ok<T, E>::of(result);
    }

    static createErr(info: E): Result<T, E> {
        return Err<T, E>::of(info);
    }

    method isOk(): Bool {
        return this->is<Ok<T, E>>();
    }

    method isErr(): Bool {
        return this->is<Err<T, E>>();
    }

    method result(): T {
        return this->as<Ok<T, E>>().result;
    }

    method failure(): E {
        return this->as<Err<T, E>>().failure;
    }

    method convert<U, V>(): Result<U, V> {
        return this->isOk() ? Result<U, V>::createOk(this->result()->as<U>()) : Result<U, V>::createErr(this->failure()->as<V>());
    }
}

struct entity Ok<T, E=None> provides Result<T, E> {
    field result: T;

    static of(result: T): Ok<T, E> {
        return Ok<T, E>@{ result = result };
    }
}

struct entity Err<T, E=None> provides Result<T, E> {
    field failure: E;

    static of(failure: E): Err<T, E> {
        return Err<T, E>@{ failure = failure };
    }
}

//<summary>All actual entities/concepts implicitly provide this concept.</summary>
concept Object provides Some {
}

//<summary>All collections provide this concept so we can expand them with spread operators.</summary>
concept Expandoable<T> provides Object {
    method expand<U>(): List<U> # special_method
}
